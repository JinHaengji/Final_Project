import java.io.*;
import javaFlacEncoder.FLACFileWriter;

import javax.sound.sampled.*;
		
public class Cuttingfile 
{
	static int mil = 0;
	static String type_w = ".wav";
	static String type_f = ".flac";
	static String path = "D://졸작//file//wav//test6_1114";
	static String path_w = "D://졸작//file//wav//test6_1114" + type_w;

	public static void main(String[] args) throws UnsupportedAudioFileException, IOException 
	{
	
		
		
	
		//test6_1114.wav : 28초 
		int totaltime = 0;
		totaltime = (int) totalLength(path_w); //안전하게 +1초 할까?
		//System.out.println(totaltime);
		
		//totaltime의 맨 앞자리수를 받아와야함.		
		//그냥 10초마다 몇번 돌아갈수있는지를 세면 되니까
		mil = (totaltime / 10) +1;
		//System.out.println(mil);
		
		//10초마다 자르기
		for(int i=0; i < mil; i++)
		{
			copyAudio(path_w, path + "_s" + (i+1) + type_w, i*10, 10); //출력되는 파일은 원본파일명 끝에 1,2,3... 차례대로 붙음
		}
		
		
		
	}
	
	public void convert() {
		//각각의 wav -> flac
				for(int i = 0; i < mil; i++)
				{
					File inputFile = new File(path + "_s" + (i+1) + type_w);
				    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(inputFile);
				    AudioSystem.write(audioInputStream, FLACFileWriter.FLAC, new File(path + "_s" + (i+1) + type_f)); 
				}
	}
	
	public static double totalLength(String path_w) throws UnsupportedAudioFileException, IOException
	{
		File file = new File(path_w);
		AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(file);
		AudioFormat format = audioInputStream.getFormat();
		long frames = audioInputStream.getFrameLength();
		double durationInSeconds = (frames+0.0) / format.getFrameRate();  
		
		return durationInSeconds;
		//System.out.println(durationInSeconds);
	}
	
	public static void copyAudio(String sourceFileName, String destinationFileName, int startSecond, int secondsToCopy)
	{
		AudioInputStream inputStream = null;
		AudioInputStream shortenedStream = null;
		try
		{
		  File file = new File(sourceFileName);
		  AudioFileFormat fileFormat = AudioSystem.getAudioFileFormat(file);
		  AudioFormat format = fileFormat.getFormat();
		    inputStream = AudioSystem.getAudioInputStream(file);
		  int bytesPerSecond = format.getFrameSize() * (int)format.getFrameRate();
		  inputStream.skip(startSecond * bytesPerSecond);
		  long framesOfAudioToCopy = secondsToCopy * (int)format.getFrameRate();
		  shortenedStream = new AudioInputStream(inputStream, format, framesOfAudioToCopy);
		  File destinationFile = new File(destinationFileName);
		  AudioSystem.write(shortenedStream, fileFormat.getType(), destinationFile);
		} 
		catch (Exception e)
		{
		  System.out.println(e);
		} 
		finally
		{
		  if (inputStream != null) try { inputStream.close(); } catch (Exception e) { System.out.println(e); }
		  if (shortenedStream != null) try { shortenedStream.close(); } catch (Exception e) { System.out.println(e); }
		}
	}
}
